//! # D-Bus interface proxy for: `net.connman.iwd.AgentManager`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `Interface '/net/connman/iwd' from service 'net.connman.iwd' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "net.connman.iwd.AgentManager",
    default_service = "net.connman.iwd",
    default_path = "/net/connman/iwd"
)]
pub trait AgentManager {
    /// RegisterAgent method
    fn register_agent(&self, path: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// RegisterNetworkConfigurationAgent method
    fn register_network_configuration_agent(
        &self,
        path: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// UnregisterAgent method
    fn unregister_agent(&self, path: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// UnregisterNetworkConfigurationAgent method
    fn unregister_network_configuration_agent(
        &self,
        path: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;
}
